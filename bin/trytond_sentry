#!/usr/bin/env python
#This file is part of Tryton.  The COPYRIGHT file at the top level of
#this repository contains the full copyright notices and license terms.
import sys
import os
from functools import wraps
DIR = os.path.abspath(os.path.normpath(os.path.join(__file__,
    '..', '..', 'trytond')))
if os.path.isdir(DIR):
    sys.path.insert(0, os.path.dirname(DIR))
import trytond
from raven import Client


def patch(old_dispatch, client):
    """
    Patch the `old_dispatcher` with an exception handler to send exceptions
    which occur to sentry through `client`

    :param old_dispatch: the function/method to be patched
    :param client: An instance of :class:`raven.Client`.
    """
    @wraps(old_dispatch)
    def wrapper(*args, **kwargs):
        try:
            return old_dispatch(*args, **kwargs)
        except Exception, exc:
            if exc.args and exc.args[0] in ('NotLogged', 'AccessDenied'):
                # Dont show our message or spam sentry for NotLogged errors
                raise
            elif exc.args and exc.args[0] == 'UserError':
                # UserErrors should be displayed to the user
                raise
            elif exc.args and exc.args[0] == 'ConcurrencyException' and \
                    exc.args[1] == 'Records were modified in the meanwhile':
                # Sometimes when somebody else modifies the same record on
                # your screen that you left open for a long time,
                # you get concurrency errors.
                # These errors must be shown to users
                raise
            event_id = client.captureException(True)
            raise Exception(
                'UserError',
                "Oops! Something terrible happened\n\n"
                "Your ever loving friends at Openlabs have been notified of "
                "this grave fault!\n",
                "However, if you wish to speak with an Openlabs consultant "
                "about this issue, you may use the following reference:\n\n"
                "%s" % event_id
                )
    return wrapper


for arg in sys.argv:
    client = None
    if arg.startswith('--sentry-dsn='):
        client = Client(arg.split('=', 1)[1])
        sys.argv.remove(arg)
    elif arg == "-s":
        index_of_arg = sys.argv.index("-s")
        client = Client(sys.argv[index_of_arg + 1])

        # Remove the -s and the value which is next to it
        sys.argv.pop(index_of_arg)
        sys.argv.pop(index_of_arg)

    if client:
        from trytond.protocols import dispatcher
        dispatcher.dispatch = patch(dispatcher.dispatch, client)
        break

if '--profile' in sys.argv:
    import profile
    import pstats
    import tempfile
    sys.argv.remove('--profile')

    statfile = tempfile.mkstemp(".stat","trytond-")[1]
    profile.run('trytond.server.TrytonServer().run()', statfile)
    s = pstats.Stats(statfile)
    s.sort_stats('cumulative').print_stats()
    s.sort_stats('call').print_stats()
    s.sort_stats('time').print_stats()
    s.sort_stats('time')
    s.print_callers()
    s.print_callees()

    os.remove(statfile)

else:
    trytond.server.TrytonServer().run()
